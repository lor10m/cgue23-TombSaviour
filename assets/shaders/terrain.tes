#version 450 core
layout(quads, fractional_odd_spacing, ccw) in;

uniform sampler2D heightMap;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 lightSpaceMatrix;

in vec2 HeightMapCoordinates[];

out float Height;
out vec4 textPos;

out vec3 fragPos;
out vec4 fragPosLightSpace;
//out vec4 fragNormal;

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec2 t00 = HeightMapCoordinates[0];
    vec2 t01 = HeightMapCoordinates[1];
    vec2 t10 = HeightMapCoordinates[2];
    vec2 t11 = HeightMapCoordinates[3];

    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 texCoord = (t1 - t0) * v + t0;

    Height = texture(heightMap, texCoord).x * 254.0f;   // größer 200 => man kommt sich klein vor, kleiner => man schwebt in der Luft

    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    vec4 normal = normalize( vec4(cross(vVec.xyz, uVec.xyz), 0) );

    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0 + normal * Height;

    textPos = p;
    fragPos = vec3(model * p);
    //fragNormal = transpose(inverse(mat3(model))) * normal;
    fragPosLightSpace = lightSpaceMatrix * vec4(fragPos, 1.0);

    gl_Position = projection * view * model * p;
}